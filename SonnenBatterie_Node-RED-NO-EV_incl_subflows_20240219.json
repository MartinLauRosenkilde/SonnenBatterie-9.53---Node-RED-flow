[
    {
        "id": "df83788214c878df",
        "type": "tab",
        "label": "SonnenBatterie_NO_EV",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0747f976fd85916a",
        "type": "tab",
        "label": "Change_status_test",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "caeba8b95670af7b",
        "type": "subflow",
        "name": "HA_Get_States",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 300,
                "wires": [
                    {
                        "id": "120d955eeaab2855"
                    },
                    {
                        "id": "de7f8606c5e6ef5b"
                    },
                    {
                        "id": "9b5fa38790bde29f"
                    },
                    {
                        "id": "82949645e4c1cfc9"
                    },
                    {
                        "id": "7c6de5707b9b31f0"
                    },
                    {
                        "id": "d71667931d405ede"
                    },
                    {
                        "id": "c857d0cbf5d4c811"
                    },
                    {
                        "id": "4f7ada405b2a7bd2"
                    },
                    {
                        "id": "e17fad59f7900ef0"
                    },
                    {
                        "id": "7de18e9c1b2d407f"
                    },
                    {
                        "id": "bb3c020a00cfab0e"
                    },
                    {
                        "id": "43b17d200e153e20"
                    },
                    {
                        "id": "3a46072d55704589"
                    },
                    {
                        "id": "814ce9b693ffad0e"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 800,
                "y": 800,
                "wires": [
                    {
                        "id": "3a46072d55704589",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#FFAAAA",
        "icon": "node-red/rpi.svg"
    },
    {
        "id": "cd483fcfd9d131fc",
        "type": "subflow",
        "name": "SB_Set_SC",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "20f36ece957f6f28"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1020,
                "y": 40,
                "wires": [
                    {
                        "id": "559430185634b844",
                        "port": 0
                    }
                ]
            },
            {
                "x": 1220,
                "y": 100,
                "wires": [
                    {
                        "id": "d259eecb474f20e3",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#3FADB5",
        "icon": "font-awesome/fa-sun-o"
    },
    {
        "id": "2205fa4294b5478a",
        "type": "subflow",
        "name": "SB_Set_No_Charge",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 120,
                "wires": [
                    {
                        "id": "984d736e3af99384"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1600,
                "y": 40,
                "wires": [
                    {
                        "id": "3d7e4a9c2226ccb7",
                        "port": 0
                    }
                ]
            },
            {
                "x": 2420,
                "y": 180,
                "wires": [
                    {
                        "id": "331943a47cc0f879",
                        "port": 0
                    },
                    {
                        "id": "484a10df7eb83c3f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#3FADB5",
        "icon": "font-awesome/fa-hand-stop-o"
    },
    {
        "id": "78d769ea3d1c094e",
        "type": "subflow",
        "name": "SB_Set_Charge",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 100,
                "wires": [
                    {
                        "id": "6eb81931223314cc"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1640,
                "y": 40,
                "wires": [
                    {
                        "id": "70105fbf8a0d421a",
                        "port": 0
                    }
                ]
            },
            {
                "x": 2500,
                "y": 140,
                "wires": [
                    {
                        "id": "77eab61b593b4a45",
                        "port": 0
                    },
                    {
                        "id": "7d9e2a677b0152c2",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#3FADB5",
        "icon": "font-awesome/fa-battery-full"
    },
    {
        "id": "bbec9d41a5a0a579",
        "type": "subflow",
        "name": "SB_Set_Discharge",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 60,
                "wires": [
                    {
                        "id": "22a226f9c80ee8c5"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1840,
                "y": 40,
                "wires": [
                    {
                        "id": "326b81e2203e9f2e",
                        "port": 0
                    }
                ]
            },
            {
                "x": 2460,
                "y": 120,
                "wires": [
                    {
                        "id": "13c56e6654f45e0b",
                        "port": 0
                    },
                    {
                        "id": "1771d449514d0677",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#3FADB5",
        "icon": "font-awesome/fa-battery-empty"
    },
    {
        "id": "f3c6dfc0.bd122",
        "type": "server",
        "name": "Home Assistant",
        "addon": true
    },
    {
        "id": "120d955eeaab2855",
        "type": "api-current-state",
        "z": "caeba8b95670af7b",
        "name": "Sun_Forecast_Today",
        "server": "f3c6dfc0.bd122",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "sensor.solcast_pv_forecast_forecast_today",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 320,
        "y": 20,
        "wires": [
            [
                "bdd8d46844eaafcc"
            ]
        ]
    },
    {
        "id": "de7f8606c5e6ef5b",
        "type": "api-current-state",
        "z": "caeba8b95670af7b",
        "name": "Sun_Forecast_Tomorrow",
        "server": "f3c6dfc0.bd122",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "sensor.solcast_pv_forecast_forecast_tomorrow",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 330,
        "y": 80,
        "wires": [
            [
                "c5c8763e257ee658"
            ]
        ]
    },
    {
        "id": "bdd8d46844eaafcc",
        "type": "change",
        "z": "caeba8b95670af7b",
        "name": "Saved_Sun_Today",
        "rules": [
            {
                "t": "set",
                "p": "Sun_Today",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 20,
        "wires": [
            []
        ]
    },
    {
        "id": "c5c8763e257ee658",
        "type": "change",
        "z": "caeba8b95670af7b",
        "name": "Saved_Sun_Tomorrow",
        "rules": [
            {
                "t": "set",
                "p": "Sun_Tomorrow",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "9b5fa38790bde29f",
        "type": "api-current-state",
        "z": "caeba8b95670af7b",
        "name": "SoC",
        "server": "f3c6dfc0.bd122",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "sensor.sonnenbatterie_225965_state_charge_user",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 270,
        "y": 200,
        "wires": [
            [
                "8433c0c3494f366c"
            ]
        ]
    },
    {
        "id": "8433c0c3494f366c",
        "type": "change",
        "z": "caeba8b95670af7b",
        "name": "Saved_SoC",
        "rules": [
            {
                "t": "set",
                "p": "SoC",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "82949645e4c1cfc9",
        "type": "api-current-state",
        "z": "caeba8b95670af7b",
        "name": "Weather",
        "server": "f3c6dfc0.bd122",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "weather.forecast_hjem",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 280,
        "y": 140,
        "wires": [
            [
                "23c28c4b76ab90e4"
            ]
        ]
    },
    {
        "id": "c857d0cbf5d4c811",
        "type": "api-current-state",
        "z": "caeba8b95670af7b",
        "name": "SB_Status",
        "server": "f3c6dfc0.bd122",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "sensor.sonnenbatterie_225965",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 290,
        "y": 260,
        "wires": [
            [
                "3daf12b1c2959220"
            ]
        ]
    },
    {
        "id": "4f7ada405b2a7bd2",
        "type": "api-current-state",
        "z": "caeba8b95670af7b",
        "name": "Grid_Consumption",
        "server": "f3c6dfc0.bd122",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "sensor.sonnenbatterie_225965_consumption_w",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 310,
        "y": 320,
        "wires": [
            [
                "4aa9822d2f6a4d37"
            ]
        ]
    },
    {
        "id": "7de18e9c1b2d407f",
        "type": "api-current-state",
        "z": "caeba8b95670af7b",
        "name": "Production",
        "server": "f3c6dfc0.bd122",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "sensor.sonnenbatterie_225965_state_charge_user",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 290,
        "y": 440,
        "wires": [
            [
                "dce0adf2bca7ecbe"
            ]
        ]
    },
    {
        "id": "d71667931d405ede",
        "type": "api-current-state",
        "z": "caeba8b95670af7b",
        "name": "kWh_Price_Raw",
        "server": "f3c6dfc0.bd122",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "sensor.nordpool_kwh_dk2_dkk_4_10_0",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 300,
        "y": 500,
        "wires": [
            [
                "7cbb0192a48265fb"
            ]
        ]
    },
    {
        "id": "7c6de5707b9b31f0",
        "type": "api-current-state",
        "z": "caeba8b95670af7b",
        "name": "kWh_Price_Total",
        "server": "f3c6dfc0.bd122",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "sensor.nordpool_kwh_dk2_dkk_4_07_025",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 310,
        "y": 560,
        "wires": [
            [
                "528035d781da5167"
            ]
        ]
    },
    {
        "id": "23c28c4b76ab90e4",
        "type": "change",
        "z": "caeba8b95670af7b",
        "name": "Saved_Weather",
        "rules": [
            {
                "t": "set",
                "p": "Weather",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 580,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "528035d781da5167",
        "type": "change",
        "z": "caeba8b95670af7b",
        "name": "Saved_Price_Total",
        "rules": [
            {
                "t": "set",
                "p": "PriceTotal",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "7cbb0192a48265fb",
        "type": "change",
        "z": "caeba8b95670af7b",
        "name": "Saved_Price_Raw",
        "rules": [
            {
                "t": "set",
                "p": "PriceRaw",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "3daf12b1c2959220",
        "type": "change",
        "z": "caeba8b95670af7b",
        "name": "Saved_SB_Status",
        "rules": [
            {
                "t": "set",
                "p": "SB_Status",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "e17fad59f7900ef0",
        "type": "api-current-state",
        "z": "caeba8b95670af7b",
        "name": "Battery_in/out",
        "server": "f3c6dfc0.bd122",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "sensor.sonnenbatterie_225965_state_battery_inout",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 300,
        "y": 380,
        "wires": [
            [
                "26aa8505f9e3b21e"
            ]
        ]
    },
    {
        "id": "4aa9822d2f6a4d37",
        "type": "change",
        "z": "caeba8b95670af7b",
        "name": "Saved_Grid_Con",
        "rules": [
            {
                "t": "set",
                "p": "GridCon",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "26aa8505f9e3b21e",
        "type": "change",
        "z": "caeba8b95670af7b",
        "name": "Saved_Battery",
        "rules": [
            {
                "t": "set",
                "p": "Battery",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 580,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "dce0adf2bca7ecbe",
        "type": "change",
        "z": "caeba8b95670af7b",
        "name": "Saved_Production",
        "rules": [
            {
                "t": "set",
                "p": "Production",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 590,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "bb3c020a00cfab0e",
        "type": "api-current-state",
        "z": "caeba8b95670af7b",
        "name": "kWh_Price_Avg_Peak",
        "server": "f3c6dfc0.bd122",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "sensor.average_price_17_to_21",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 320,
        "y": 620,
        "wires": [
            [
                "92b2a6f00a5695ac"
            ]
        ]
    },
    {
        "id": "92b2a6f00a5695ac",
        "type": "change",
        "z": "caeba8b95670af7b",
        "name": "Saved_Price_Avg_Peak",
        "rules": [
            {
                "t": "set",
                "p": "PriceAvgPeak",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "43b17d200e153e20",
        "type": "api-current-state",
        "z": "caeba8b95670af7b",
        "name": "SetPoint",
        "server": "f3c6dfc0.bd122",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "sensor.sonnenapiv2_latest_setpoint_w",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 280,
        "y": 740,
        "wires": [
            [
                "39fbe857653e8623"
            ]
        ]
    },
    {
        "id": "39fbe857653e8623",
        "type": "change",
        "z": "caeba8b95670af7b",
        "name": "Saved_SetPoint",
        "rules": [
            {
                "t": "set",
                "p": "SetPoint",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 580,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "814ce9b693ffad0e",
        "type": "api-current-state",
        "z": "caeba8b95670af7b",
        "name": "kWh_Price_Avg_Night",
        "server": "f3c6dfc0.bd122",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "sensor.average_price_01_to_06",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 320,
        "y": 680,
        "wires": [
            [
                "c06e24bd86cfb498"
            ]
        ]
    },
    {
        "id": "c06e24bd86cfb498",
        "type": "change",
        "z": "caeba8b95670af7b",
        "name": "Saved_Price_Avg_Night",
        "rules": [
            {
                "t": "set",
                "p": "PriceAvgNight",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 610,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "3a46072d55704589",
        "type": "delay",
        "z": "caeba8b95670af7b",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 240,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "e7156070a6cce148",
        "type": "switch",
        "z": "cd483fcfd9d131fc",
        "name": "Chck_OperatingMode",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 620,
        "y": 40,
        "wires": [
            [
                "559430185634b844"
            ],
            [
                "3712572e1a92a63f"
            ]
        ]
    },
    {
        "id": "3712572e1a92a63f",
        "type": "function",
        "z": "cd483fcfd9d131fc",
        "name": "Prepare_set_mode",
        "func": "var sonnen_ip = global.get(\"sonnen_api_ip\");\nvar sonnen_token = global.get(\"sonnen_api_token\");\n\nvar endpoint = \"/api/v2/configurations\"\n\nmsg.url = \"http://\" + sonnen_ip + endpoint;\nmsg.method = \"PUT\"\nmsg.headers = {};\nmsg.headers['Auth-Token'] = sonnen_token;\nmsg.payload = {\"EM_OperatingMode\":\"2\"}\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 100,
        "wires": [
            [
                "d259eecb474f20e3"
            ]
        ]
    },
    {
        "id": "d259eecb474f20e3",
        "type": "http request",
        "z": "cd483fcfd9d131fc",
        "name": "http_PUT_api",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1080,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "559430185634b844",
        "type": "change",
        "z": "cd483fcfd9d131fc",
        "name": "Set_Message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Already_SC_no_change",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 860,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "af58c4e2e3afcf20",
        "type": "function",
        "z": "cd483fcfd9d131fc",
        "name": "get_operating_mode",
        "func": "try {\n    const startIndex = msg.payload.indexOf('\"OperatingMode\":\"');\n    if (startIndex !== -1) {\n        const valueStart = startIndex + '\"OperatingMode\":\"'.length;\n        const endIndex = msg.payload.indexOf('\"', valueStart);\n        if (endIndex !== -1) {\n            const operatingMode = msg.payload.substring(valueStart, endIndex);\n            msg.payload = operatingMode;\n        } else {\n            throw new Error(\"End of OperatingMode value not found\");\n        }\n    } else {\n        throw new Error(\"OperatingMode pattern not found\");\n    }\n} catch (error) {\n    console.error(\"Error extracting OperatingMode:\", error);\n    msg.payload = \"Error: Unable to extract OperatingMode\";\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 40,
        "wires": [
            [
                "e7156070a6cce148"
            ]
        ]
    },
    {
        "id": "20f36ece957f6f28",
        "type": "http request",
        "z": "cd483fcfd9d131fc",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://192.168.31.171/api/v2/status",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 170,
        "y": 40,
        "wires": [
            [
                "af58c4e2e3afcf20"
            ]
        ]
    },
    {
        "id": "a721d42568e425af",
        "type": "function",
        "z": "2205fa4294b5478a",
        "name": "get_operating_mode",
        "func": "try {\n    const startIndex = msg.payload.indexOf('\"OperatingMode\":\"');\n    if (startIndex !== -1) {\n        const valueStart = startIndex + '\"OperatingMode\":\"'.length;\n        const endIndex = msg.payload.indexOf('\"', valueStart);\n        if (endIndex !== -1) {\n            const operatingMode = msg.payload.substring(valueStart, endIndex);\n            msg.payload = operatingMode;\n        } else {\n            throw new Error(\"End of OperatingMode value not found\");\n        }\n    } else {\n        throw new Error(\"OperatingMode pattern not found\");\n    }\n} catch (error) {\n    console.error(\"Error extracting OperatingMode:\", error);\n    msg.payload = \"Error: Unable to extract OperatingMode\";\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 120,
        "wires": [
            [
                "68c15d53d6843830"
            ]
        ]
    },
    {
        "id": "984d736e3af99384",
        "type": "http request",
        "z": "2205fa4294b5478a",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://192.168.31.171/api/v2/status",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 190,
        "y": 120,
        "wires": [
            [
                "a721d42568e425af"
            ]
        ]
    },
    {
        "id": "68c15d53d6843830",
        "type": "switch",
        "z": "2205fa4294b5478a",
        "name": "Chck_OperatingMode",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 640,
        "y": 120,
        "wires": [
            [
                "8939b6aac0c1cd9b"
            ],
            [
                "2db9f368eacffc99"
            ]
        ]
    },
    {
        "id": "2db9f368eacffc99",
        "type": "function",
        "z": "2205fa4294b5478a",
        "name": "Prepare_set_mode",
        "func": "var sonnen_ip = global.get(\"sonnen_api_ip\");\nvar sonnen_token = global.get(\"sonnen_api_token\");\n\nvar endpoint = \"/api/v2/configurations\"\n\nmsg.url = \"http://\" + sonnen_ip + endpoint;\nmsg.method = \"PUT\"\nmsg.headers = {};\nmsg.headers['Auth-Token'] = sonnen_token;\nmsg.payload = {\"EM_OperatingMode\":\"1\"}\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 200,
        "wires": [
            [
                "a27b0cc45268bb95"
            ]
        ]
    },
    {
        "id": "a27b0cc45268bb95",
        "type": "http request",
        "z": "2205fa4294b5478a",
        "name": "http_PUT_api",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1100,
        "y": 200,
        "wires": [
            [
                "bc8992bdfa5d7519"
            ]
        ]
    },
    {
        "id": "3d7e4a9c2226ccb7",
        "type": "change",
        "z": "2205fa4294b5478a",
        "name": "Set_Message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Already_Manual_no_change",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1460,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "88ee97858514f139",
        "type": "http request",
        "z": "2205fa4294b5478a",
        "name": "Generic HTTP Request",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1750,
        "y": 180,
        "wires": [
            [
                "9aebe96431eb6de2"
            ]
        ]
    },
    {
        "id": "a7da3ce24baeb8f1",
        "type": "function",
        "z": "2205fa4294b5478a",
        "name": "Prepare charging=0 Watts",
        "func": "\nvar sonnen_ip = global.get(\"sonnen_api_ip\");\nvar sonnen_token = global.get(\"sonnen_api_token\");\n\nvar endpoint = \"/api/v2/setpoint/charge/0\";\n\nmsg.url = \"http://\" + sonnen_ip + endpoint;\nmsg.method = \"POST\"\nmsg.headers = {};\nmsg.headers['Auth-Token'] = sonnen_token;\nmsg.payload = {};\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 180,
        "wires": [
            [
                "88ee97858514f139"
            ]
        ]
    },
    {
        "id": "bc8992bdfa5d7519",
        "type": "delay",
        "z": "2205fa4294b5478a",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1280,
        "y": 200,
        "wires": [
            [
                "a7da3ce24baeb8f1"
            ]
        ]
    },
    {
        "id": "484a10df7eb83c3f",
        "type": "change",
        "z": "2205fa4294b5478a",
        "name": "Set_Message_OK",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Charge_set_0_watts",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2230,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "9aebe96431eb6de2",
        "type": "switch",
        "z": "2205fa4294b5478a",
        "name": "Chck_Response",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1980,
        "y": 180,
        "wires": [
            [
                "484a10df7eb83c3f"
            ],
            [
                "331943a47cc0f879"
            ]
        ]
    },
    {
        "id": "331943a47cc0f879",
        "type": "change",
        "z": "2205fa4294b5478a",
        "name": "Set_Message_Error",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Error_Discharge_not_set",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2240,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "8939b6aac0c1cd9b",
        "type": "switch",
        "z": "2205fa4294b5478a",
        "name": "Chck_SetPoint",
        "property": "SetPoint",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1100,
        "y": 80,
        "wires": [
            [
                "3d7e4a9c2226ccb7"
            ],
            [
                "a7da3ce24baeb8f1"
            ]
        ]
    },
    {
        "id": "f84db5a1b149ed66",
        "type": "function",
        "z": "78d769ea3d1c094e",
        "name": "get_operating_mode",
        "func": "try {\n    const startIndex = msg.payload.indexOf('\"OperatingMode\":\"');\n    if (startIndex !== -1) {\n        const valueStart = startIndex + '\"OperatingMode\":\"'.length;\n        const endIndex = msg.payload.indexOf('\"', valueStart);\n        if (endIndex !== -1) {\n            const operatingMode = msg.payload.substring(valueStart, endIndex);\n            msg.payload = operatingMode;\n        } else {\n            throw new Error(\"End of OperatingMode value not found\");\n        }\n    } else {\n        throw new Error(\"OperatingMode pattern not found\");\n    }\n} catch (error) {\n    console.error(\"Error extracting OperatingMode:\", error);\n    msg.payload = \"Error: Unable to extract OperatingMode\";\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 100,
        "wires": [
            [
                "66bcd0fe6e9c9c4a"
            ]
        ]
    },
    {
        "id": "6eb81931223314cc",
        "type": "http request",
        "z": "78d769ea3d1c094e",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://192.168.31.171/api/v2/status",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 190,
        "y": 100,
        "wires": [
            [
                "f84db5a1b149ed66"
            ]
        ]
    },
    {
        "id": "66bcd0fe6e9c9c4a",
        "type": "switch",
        "z": "78d769ea3d1c094e",
        "name": "Chck_OperatingMode",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 640,
        "y": 100,
        "wires": [
            [
                "61509ba7dc7756b1"
            ],
            [
                "ff38f890a6d86801"
            ]
        ]
    },
    {
        "id": "ff38f890a6d86801",
        "type": "function",
        "z": "78d769ea3d1c094e",
        "name": "Prepare_set_mode",
        "func": "var sonnen_ip = global.get(\"sonnen_api_ip\");\nvar sonnen_token = global.get(\"sonnen_api_token\");\n\nvar endpoint = \"/api/v2/configurations\"\n\nmsg.url = \"http://\" + sonnen_ip + endpoint;\nmsg.method = \"PUT\"\nmsg.headers = {};\nmsg.headers['Auth-Token'] = sonnen_token;\nmsg.payload = {\"EM_OperatingMode\":\"1\"}\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 200,
        "wires": [
            [
                "90a44b9eb10b76cf"
            ]
        ]
    },
    {
        "id": "90a44b9eb10b76cf",
        "type": "http request",
        "z": "78d769ea3d1c094e",
        "name": "http_PUT_api",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1100,
        "y": 200,
        "wires": [
            [
                "3ba3615a217b2bb9"
            ]
        ]
    },
    {
        "id": "70105fbf8a0d421a",
        "type": "change",
        "z": "78d769ea3d1c094e",
        "name": "Set_Message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Already_Manual_no_change",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1460,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "998cf2307ee94865",
        "type": "http request",
        "z": "78d769ea3d1c094e",
        "name": "Generic HTTP Request",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1810,
        "y": 160,
        "wires": [
            [
                "a4dafc16a9cd4573"
            ]
        ]
    },
    {
        "id": "f0e456c40e33e084",
        "type": "function",
        "z": "78d769ea3d1c094e",
        "name": "Prepare Charging=3500 Watts",
        "func": "\nvar sonnen_ip = global.get(\"sonnen_api_ip\");\nvar sonnen_token = global.get(\"sonnen_api_token\");\n\nvar endpoint = \"/api/v2/setpoint/charge/3500\";\n\nmsg.url = \"http://\" + sonnen_ip + endpoint;\nmsg.method = \"POST\"\nmsg.headers = {};\nmsg.headers['Auth-Token'] = sonnen_token;\nmsg.payload = {};\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 160,
        "wires": [
            [
                "998cf2307ee94865"
            ]
        ]
    },
    {
        "id": "3ba3615a217b2bb9",
        "type": "delay",
        "z": "78d769ea3d1c094e",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1280,
        "y": 200,
        "wires": [
            [
                "f0e456c40e33e084"
            ]
        ]
    },
    {
        "id": "7d9e2a677b0152c2",
        "type": "change",
        "z": "78d769ea3d1c094e",
        "name": "Set_Message_OK",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Charge_set_3500",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2290,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "a4dafc16a9cd4573",
        "type": "switch",
        "z": "78d769ea3d1c094e",
        "name": "Chck_Response",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2040,
        "y": 160,
        "wires": [
            [
                "7d9e2a677b0152c2"
            ],
            [
                "77eab61b593b4a45"
            ]
        ]
    },
    {
        "id": "77eab61b593b4a45",
        "type": "change",
        "z": "78d769ea3d1c094e",
        "name": "Set_Message_Error",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Error_Discharge_not_set",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2300,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "61509ba7dc7756b1",
        "type": "switch",
        "z": "78d769ea3d1c094e",
        "name": "Chck_SetPoint",
        "property": "SetPoint",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "3500",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "3500",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1060,
        "y": 80,
        "wires": [
            [
                "70105fbf8a0d421a"
            ],
            [
                "f0e456c40e33e084"
            ]
        ]
    },
    {
        "id": "09f31daa3aea3167",
        "type": "function",
        "z": "bbec9d41a5a0a579",
        "name": "get_operating_mode",
        "func": "try {\n    const startIndex = msg.payload.indexOf('\"OperatingMode\":\"');\n    if (startIndex !== -1) {\n        const valueStart = startIndex + '\"OperatingMode\":\"'.length;\n        const endIndex = msg.payload.indexOf('\"', valueStart);\n        if (endIndex !== -1) {\n            const operatingMode = msg.payload.substring(valueStart, endIndex);\n            msg.payload = operatingMode;\n        } else {\n            throw new Error(\"End of OperatingMode value not found\");\n        }\n    } else {\n        throw new Error(\"OperatingMode pattern not found\");\n    }\n} catch (error) {\n    console.error(\"Error extracting OperatingMode:\", error);\n    msg.payload = \"Error: Unable to extract OperatingMode\";\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 60,
        "wires": [
            [
                "7a2a01c58ec1d410"
            ]
        ]
    },
    {
        "id": "22a226f9c80ee8c5",
        "type": "http request",
        "z": "bbec9d41a5a0a579",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://192.168.31.171/api/v2/status",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 170,
        "y": 60,
        "wires": [
            [
                "09f31daa3aea3167"
            ]
        ]
    },
    {
        "id": "7a2a01c58ec1d410",
        "type": "switch",
        "z": "bbec9d41a5a0a579",
        "name": "Chck_OperatingMode",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 620,
        "y": 60,
        "wires": [
            [
                "424ec17fae1680d3"
            ],
            [
                "0ef649d8f58aa814"
            ]
        ]
    },
    {
        "id": "0ef649d8f58aa814",
        "type": "function",
        "z": "bbec9d41a5a0a579",
        "name": "Prepare_set_mode",
        "func": "var sonnen_ip = global.get(\"sonnen_api_ip\");\nvar sonnen_token = global.get(\"sonnen_api_token\");\n\nvar endpoint = \"/api/v2/configurations\"\n\nmsg.url = \"http://\" + sonnen_ip + endpoint;\nmsg.method = \"PUT\"\nmsg.headers = {};\nmsg.headers['Auth-Token'] = sonnen_token;\nmsg.payload = {\"EM_OperatingMode\":\"1\"}\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 160,
        "wires": [
            [
                "cfe548d39d9f1550"
            ]
        ]
    },
    {
        "id": "cfe548d39d9f1550",
        "type": "http request",
        "z": "bbec9d41a5a0a579",
        "name": "http_PUT_api",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1080,
        "y": 160,
        "wires": [
            [
                "d8382623f889c075"
            ]
        ]
    },
    {
        "id": "326b81e2203e9f2e",
        "type": "change",
        "z": "bbec9d41a5a0a579",
        "name": "Set_Message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Already_Manual_no_change",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1440,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "bb5034b2520fe8f6",
        "type": "http request",
        "z": "bbec9d41a5a0a579",
        "name": "Generic HTTP Request",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1790,
        "y": 120,
        "wires": [
            [
                "ad0d3dec06df6ea3"
            ]
        ]
    },
    {
        "id": "782b2fd2cb3acfb8",
        "type": "function",
        "z": "bbec9d41a5a0a579",
        "name": "Prepare Discharging=3300 Watts",
        "func": "\nvar sonnen_ip = global.get(\"sonnen_api_ip\");\nvar sonnen_token = global.get(\"sonnen_api_token\");\n\nvar endpoint = \"/api/v2/setpoint/discharge/3300\";\n\nmsg.url = \"http://\" + sonnen_ip + endpoint;\nmsg.method = \"POST\"\nmsg.headers = {};\nmsg.headers['Auth-Token'] = sonnen_token;\nmsg.payload = {};\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 120,
        "wires": [
            [
                "bb5034b2520fe8f6"
            ]
        ]
    },
    {
        "id": "d8382623f889c075",
        "type": "delay",
        "z": "bbec9d41a5a0a579",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1260,
        "y": 160,
        "wires": [
            [
                "782b2fd2cb3acfb8"
            ]
        ]
    },
    {
        "id": "13c56e6654f45e0b",
        "type": "change",
        "z": "bbec9d41a5a0a579",
        "name": "Set_Message_OK",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Discharge_set_3300",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2270,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "ad0d3dec06df6ea3",
        "type": "switch",
        "z": "bbec9d41a5a0a579",
        "name": "Chck_Response",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2020,
        "y": 120,
        "wires": [
            [
                "13c56e6654f45e0b"
            ],
            [
                "1771d449514d0677"
            ]
        ]
    },
    {
        "id": "1771d449514d0677",
        "type": "change",
        "z": "bbec9d41a5a0a579",
        "name": "Set_Message_Error",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Error_Discharge_not_set",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2280,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "424ec17fae1680d3",
        "type": "switch",
        "z": "bbec9d41a5a0a579",
        "name": "Chck_SetPoint",
        "property": "SetPoint",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "3300",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "3300",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1020,
        "y": 40,
        "wires": [
            [
                "326b81e2203e9f2e"
            ],
            [
                "782b2fd2cb3acfb8"
            ]
        ]
    },
    {
        "id": "fc4e448f2bb84a63",
        "type": "inject",
        "z": "df83788214c878df",
        "name": "Check_every_30 seconds",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 260,
        "wires": [
            [
                "57b926f3de37d54f"
            ]
        ]
    },
    {
        "id": "595b80d71eceee0e",
        "type": "subflow:caeba8b95670af7b",
        "z": "df83788214c878df",
        "name": "",
        "x": 580,
        "y": 260,
        "wires": [
            [
                "9e3a9ceeac759e13"
            ]
        ]
    },
    {
        "id": "57b926f3de37d54f",
        "type": "change",
        "z": "df83788214c878df",
        "name": "Time_Saved",
        "rules": [
            {
                "t": "set",
                "p": "Timestamp",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 390,
        "y": 260,
        "wires": [
            [
                "595b80d71eceee0e"
            ]
        ]
    },
    {
        "id": "9e3a9ceeac759e13",
        "type": "function",
        "z": "df83788214c878df",
        "name": "Summer_or_winter?",
        "func": "// Function node code\nconst timestamp = global.get('Timestamp'); // Get the timestamp from global context\nconst date = new Date(timestamp);\nconst month = date.getMonth() + 1; // Months are zero-based, so January is 0, February is 1, and so on\n\n// Check if the month falls within the summer or winter season\nif ((month >= 4 && month <= 9) || (month >= 10 || month <= 3)) {\n    msg.payload = (month >= 4 && month <= 9) ? 'summer' : 'winter';\n} else {\n    // If it's not summer or winter, it's assumed to be some other time of the year\n    msg.payload = 'other';\n}\n\n// Return the message\nreturn msg;\n\n\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 260,
        "wires": [
            [
                "e1412b7074593cf1"
            ]
        ]
    },
    {
        "id": "e1412b7074593cf1",
        "type": "switch",
        "z": "df83788214c878df",
        "name": "Time_of_year?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "summer",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "winter",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1020,
        "y": 260,
        "wires": [
            [
                "bc8f0e7e0e13355d"
            ],
            [
                "5053e9e1af24b762"
            ]
        ]
    },
    {
        "id": "bc8f0e7e0e13355d",
        "type": "function",
        "z": "df83788214c878df",
        "name": "Is_It_Nighttime?",
        "func": "// Function node code\nconst inputDate = global.get('Timestamp'); // Get the timestamp from global context\nconst date = new Date(inputDate);\n\n// Define start and end times within the day (in minutes since midnight)\nconst startTime = 0 * 60; // 0:00 AM converted to minutes (1 hour * 60 minutes)\nconst endTime = 6 * 60;  // 6:00 AM converted to minutes (6 hours * 60 minutes)\n\n// Calculate the input time in minutes since midnight\nconst inputTime = date.getHours() * 60 + date.getMinutes();\n\n// Check if the input time is within the night range\nconst isNight = inputTime >= startTime && inputTime <= endTime;\n\n// Set the output message payload\nmsg.payload = isNight ? 'night' : 'day';\n\n// Return the message\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 80,
        "wires": [
            [
                "e8603f8cd8d0536f"
            ]
        ]
    },
    {
        "id": "e8603f8cd8d0536f",
        "type": "switch",
        "z": "df83788214c878df",
        "name": "Time_of_day?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "day",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "night",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1200,
        "y": 80,
        "wires": [
            [
                "3fb6db8f1533a6f4"
            ],
            [
                "9665899843fdbbc6"
            ]
        ]
    },
    {
        "id": "3fb6db8f1533a6f4",
        "type": "subflow:cd483fcfd9d131fc",
        "z": "df83788214c878df",
        "name": "",
        "x": 2170,
        "y": 40,
        "wires": [
            [
                "f8ac56d1e09e49c0"
            ],
            [
                "f8ac56d1e09e49c0"
            ]
        ]
    },
    {
        "id": "f8ac56d1e09e49c0",
        "type": "debug",
        "z": "df83788214c878df",
        "name": "debug_summer",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2480,
        "y": 60,
        "wires": []
    },
    {
        "id": "8fca69402b244460",
        "type": "config",
        "z": "df83788214c878df",
        "name": "SonnenBatterie_config",
        "properties": [
            {
                "p": "sonnen_api_ip",
                "pt": "global",
                "to": "192.168.31.171",
                "tot": "str"
            },
            {
                "p": "sonnen_api_token",
                "pt": "global",
                "to": "55cfff39-05c2-4494-9007-f020e6ce1380",
                "tot": "str"
            },
            {
                "p": "sonnen_charge_watts",
                "pt": "global",
                "to": "4500",
                "tot": "num"
            },
            {
                "p": "sonnen_discharge_control",
                "pt": "global",
                "to": "true",
                "tot": "bool"
            }
        ],
        "active": true,
        "x": 140,
        "y": 40,
        "wires": []
    },
    {
        "id": "9665899843fdbbc6",
        "type": "switch",
        "z": "df83788214c878df",
        "name": "is_SoC_<20%",
        "property": "SoC",
        "propertyType": "global",
        "rules": [
            {
                "t": "lte",
                "v": "20",
                "vt": "str"
            },
            {
                "t": "gt",
                "v": "20",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1400,
        "y": 140,
        "wires": [
            [
                "3fb6db8f1533a6f4"
            ],
            [
                "777201eef301f29a"
            ]
        ]
    },
    {
        "id": "777201eef301f29a",
        "type": "function",
        "z": "df83788214c878df",
        "name": "Chck_price",
        "func": "// Check if global.PriceRaw is larger than 0,87,5 kr. incl. VAT\nmsg.payload = global.get(\"PriceRaw\") >= 0.7;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 160,
        "wires": [
            [
                "0549effb5a98e500"
            ]
        ]
    },
    {
        "id": "0549effb5a98e500",
        "type": "switch",
        "z": "df83788214c878df",
        "name": "Price_high_enough?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1820,
        "y": 120,
        "wires": [
            [
                "3fb6db8f1533a6f4"
            ],
            [
                "26f6e75ff8dfc6c2"
            ]
        ]
    },
    {
        "id": "26f6e75ff8dfc6c2",
        "type": "subflow:bbec9d41a5a0a579",
        "z": "df83788214c878df",
        "name": "",
        "x": 2190,
        "y": 120,
        "wires": [
            [
                "f8ac56d1e09e49c0"
            ],
            [
                "f8ac56d1e09e49c0"
            ]
        ]
    },
    {
        "id": "6a675c8e2f6da73b",
        "type": "api-call-service",
        "z": "df83788214c878df",
        "name": "Update_Solcast_Forecast",
        "server": "f3c6dfc0.bd122",
        "version": 5,
        "debugenabled": false,
        "domain": "solcast_solar",
        "service": "update_forecasts",
        "areaId": [],
        "deviceId": [],
        "entityId": [],
        "data": "",
        "dataType": "jsonata",
        "mergeContext": "",
        "mustacheAltTags": false,
        "outputProperties": [],
        "queue": "none",
        "x": 430,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "5a7bec4c47fa89b5",
        "type": "inject",
        "z": "df83788214c878df",
        "name": "Run_at_00:00->04:00",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "0 0-3 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 120,
        "wires": [
            [
                "6a675c8e2f6da73b"
            ]
        ]
    },
    {
        "id": "832674a80c168858",
        "type": "inject",
        "z": "df83788214c878df",
        "name": "Run_at_11:30",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 12 * * *",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 180,
        "wires": [
            [
                "6a675c8e2f6da73b"
            ]
        ]
    },
    {
        "id": "5053e9e1af24b762",
        "type": "function",
        "z": "df83788214c878df",
        "name": "Is_It_Night_Day_or_Peak?",
        "func": "// Function node code\nconst inputDate = global.get('Timestamp'); // Get the timestamp from global context\nconst date = new Date(inputDate);\n\n// Define start and end times within the day (in minutes since midnight)\nconst nightStartTime = 1 * 60;    // 01:00 AM converted to minutes (1 hour * 60 minutes)\nconst dayStartTime = 6 * 60    // 06:00 AM converted to minutes (1 hour * 60 minutes)\nconst peakStartTime = 17 * 60;    // 05:00 PM converted to minutes (17 hours * 60 minutes)\nconst peakEndTime = 21 * 60;      // 09:00 PM converted to minutes (21 hours * 60 minutes)\n\n\n// Calculate the input time in minutes since midnight\nlet inputTime = date.getHours() * 60 + date.getMinutes();\n\n// Check if the input time falls within the defined ranges\nlet timeCategory;\nif (inputTime >= nightStartTime && inputTime < dayStartTime) {\n    timeCategory = 'night';\n} else if (inputTime >= dayStartTime && inputTime < peakStartTime) {\n    timeCategory = 'day';\n} else if (inputTime >= peakStartTime && inputTime < peakEndTime) {\n    timeCategory = 'peak';\n} else {\n    timeCategory = 'evening';\n}\n\n// Set the output message payload\nmsg.payload = timeCategory;\n\n// Return the message\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 460,
        "wires": [
            [
                "7cebed58e184e661"
            ]
        ]
    },
    {
        "id": "7cebed58e184e661",
        "type": "switch",
        "z": "df83788214c878df",
        "name": "Time_of_day?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "night",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "peak",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "day",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "evening",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 1280,
        "y": 460,
        "wires": [
            [
                "b0431e4c18f93d35"
            ],
            [
                "3f03d921281a926d"
            ],
            [
                "029ff5f0798e4730"
            ],
            [
                "ae4d4406baf04528"
            ]
        ]
    },
    {
        "id": "b0431e4c18f93d35",
        "type": "switch",
        "z": "df83788214c878df",
        "name": "How_Much_Sun_Tomorrow?",
        "property": "Sun_Today",
        "propertyType": "global",
        "rules": [
            {
                "t": "btwn",
                "v": "0",
                "vt": "num",
                "v2": "6",
                "v2t": "num"
            },
            {
                "t": "btwn",
                "v": "6",
                "vt": "num",
                "v2": "12",
                "v2t": "num"
            },
            {
                "t": "btwn",
                "v": "12",
                "vt": "num",
                "v2": "18",
                "v2t": "num"
            },
            {
                "t": "gt",
                "v": "18",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 1520,
        "y": 340,
        "wires": [
            [
                "04a0d9330f30c4f4"
            ],
            [
                "b9618550fae8979c"
            ],
            [
                "85747e2be125d356"
            ],
            [
                "f4757d63564501eb"
            ]
        ]
    },
    {
        "id": "04a0d9330f30c4f4",
        "type": "switch",
        "z": "df83788214c878df",
        "name": "SoC >= 75%?",
        "property": "SoC",
        "propertyType": "global",
        "rules": [
            {
                "t": "gte",
                "v": "75",
                "vt": "str"
            },
            {
                "t": "lt",
                "v": "75",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1800,
        "y": 260,
        "wires": [
            [
                "f2e0b9b6fd476a63"
            ],
            [
                "624ce31a2b6dc0eb"
            ]
        ]
    },
    {
        "id": "b9618550fae8979c",
        "type": "switch",
        "z": "df83788214c878df",
        "name": "SoC >= 50%?",
        "property": "SoC",
        "propertyType": "global",
        "rules": [
            {
                "t": "gte",
                "v": "50",
                "vt": "str"
            },
            {
                "t": "lt",
                "v": "50",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1800,
        "y": 320,
        "wires": [
            [
                "f2e0b9b6fd476a63"
            ],
            [
                "624ce31a2b6dc0eb"
            ]
        ]
    },
    {
        "id": "85747e2be125d356",
        "type": "switch",
        "z": "df83788214c878df",
        "name": "SoC >= 25%?",
        "property": "SoC",
        "propertyType": "global",
        "rules": [
            {
                "t": "gte",
                "v": "25",
                "vt": "str"
            },
            {
                "t": "lt",
                "v": "25",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1800,
        "y": 380,
        "wires": [
            [
                "f2e0b9b6fd476a63"
            ],
            [
                "624ce31a2b6dc0eb"
            ]
        ]
    },
    {
        "id": "f4757d63564501eb",
        "type": "switch",
        "z": "df83788214c878df",
        "name": "SoC >= 5%?",
        "property": "SoC",
        "propertyType": "global",
        "rules": [
            {
                "t": "gte",
                "v": "5",
                "vt": "str"
            },
            {
                "t": "lt",
                "v": "5",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1790,
        "y": 440,
        "wires": [
            [
                "f2e0b9b6fd476a63"
            ],
            [
                "624ce31a2b6dc0eb"
            ]
        ]
    },
    {
        "id": "f2e0b9b6fd476a63",
        "type": "subflow:2205fa4294b5478a",
        "z": "df83788214c878df",
        "name": "",
        "x": 2200,
        "y": 300,
        "wires": [
            [
                "a7621e2e39c25852"
            ],
            [
                "a7621e2e39c25852"
            ]
        ]
    },
    {
        "id": "624ce31a2b6dc0eb",
        "type": "subflow:78d769ea3d1c094e",
        "z": "df83788214c878df",
        "name": "",
        "x": 2180,
        "y": 380,
        "wires": [
            [
                "a7621e2e39c25852"
            ],
            [
                "a7621e2e39c25852"
            ]
        ]
    },
    {
        "id": "0ae82fd5ee96d956",
        "type": "debug",
        "z": "df83788214c878df",
        "name": "debug_winter_peak",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2490,
        "y": 520,
        "wires": []
    },
    {
        "id": "3f03d921281a926d",
        "type": "function",
        "z": "df83788214c878df",
        "name": "Chck_price",
        "func": "// Check if global.PriceRaw is larger than 0,125 kr. incl VAT\nmsg.payload = global.get(\"PriceRaw\") <= 0.10;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 460,
        "wires": [
            [
                "ac80bd3375c0adfa"
            ]
        ]
    },
    {
        "id": "ac80bd3375c0adfa",
        "type": "switch",
        "z": "df83788214c878df",
        "name": "Price_high_enough?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1800,
        "y": 520,
        "wires": [
            [
                "94feea93fd82be67"
            ],
            [
                "807aa04a19e3a79c"
            ]
        ]
    },
    {
        "id": "94feea93fd82be67",
        "type": "subflow:2205fa4294b5478a",
        "z": "df83788214c878df",
        "name": "",
        "x": 2200,
        "y": 480,
        "wires": [
            [
                "0ae82fd5ee96d956"
            ],
            [
                "0ae82fd5ee96d956"
            ]
        ]
    },
    {
        "id": "807aa04a19e3a79c",
        "type": "subflow:cd483fcfd9d131fc",
        "z": "df83788214c878df",
        "name": "",
        "x": 2170,
        "y": 560,
        "wires": [
            [
                "0ae82fd5ee96d956"
            ],
            [
                "0ae82fd5ee96d956"
            ]
        ]
    },
    {
        "id": "029ff5f0798e4730",
        "type": "switch",
        "z": "df83788214c878df",
        "name": "SoC_Status?",
        "property": "SoC",
        "propertyType": "global",
        "rules": [
            {
                "t": "gt",
                "v": "75",
                "vt": "num"
            },
            {
                "t": "btwn",
                "v": "30",
                "vt": "num",
                "v2": "75",
                "v2t": "num"
            },
            {
                "t": "lt",
                "v": "30",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1450,
        "y": 600,
        "wires": [
            [
                "c1cf3b1d6640793e"
            ],
            [
                "b8b70b6ba1eca6cb"
            ],
            [
                "3e9c46c8bea53c72"
            ]
        ]
    },
    {
        "id": "c1cf3b1d6640793e",
        "type": "subflow:cd483fcfd9d131fc",
        "z": "df83788214c878df",
        "name": "",
        "x": 2170,
        "y": 660,
        "wires": [
            [
                "600a9b654b6fdd18"
            ],
            [
                "600a9b654b6fdd18"
            ]
        ]
    },
    {
        "id": "b8b70b6ba1eca6cb",
        "type": "function",
        "z": "df83788214c878df",
        "name": "Chck_price",
        "func": "// Check if global.PriceTotal is larger than global.PriceAvgNight x 1,7\nmsg.payload = global.get(\"PriceTotal\") > global.get(\"PriceAvgNight\") * 1.7;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 660,
        "wires": [
            [
                "925e77f172d252dd"
            ]
        ]
    },
    {
        "id": "925e77f172d252dd",
        "type": "switch",
        "z": "df83788214c878df",
        "name": "Price_high_enough?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1900,
        "y": 680,
        "wires": [
            [
                "c1cf3b1d6640793e"
            ],
            [
                "c41775489de94ab1"
            ]
        ]
    },
    {
        "id": "3e9c46c8bea53c72",
        "type": "function",
        "z": "df83788214c878df",
        "name": "Chck_price",
        "func": "// Check if global.PriceTotal is larger than global.PriceAvgPeak\nmsg.payload = global.get(\"PriceTotal\") > global.get(\"PriceAvgPeak\");\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 740,
        "wires": [
            [
                "8649f588a0b3fdb4"
            ]
        ]
    },
    {
        "id": "8649f588a0b3fdb4",
        "type": "switch",
        "z": "df83788214c878df",
        "name": "Price_high_enough?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1900,
        "y": 740,
        "wires": [
            [
                "c1cf3b1d6640793e"
            ],
            [
                "c41775489de94ab1"
            ]
        ]
    },
    {
        "id": "4889ec620fc15340",
        "type": "switch",
        "z": "df83788214c878df",
        "name": "Price_high_enough?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1900,
        "y": 800,
        "wires": [
            [
                "c1cf3b1d6640793e"
            ],
            [
                "c41775489de94ab1"
            ]
        ]
    },
    {
        "id": "ae4d4406baf04528",
        "type": "function",
        "z": "df83788214c878df",
        "name": "Chck_price",
        "func": "// Check if global.PriceTotal is larger than global.PriceAvgNight x 1,5\nmsg.payload = global.get(\"PriceTotal\") > global.get(\"PriceAvgNight\") * 1.5;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1410,
        "y": 800,
        "wires": [
            [
                "4889ec620fc15340"
            ]
        ]
    },
    {
        "id": "c41775489de94ab1",
        "type": "subflow:2205fa4294b5478a",
        "z": "df83788214c878df",
        "name": "",
        "x": 2200,
        "y": 760,
        "wires": [
            [
                "600a9b654b6fdd18"
            ],
            [
                "600a9b654b6fdd18"
            ]
        ]
    },
    {
        "id": "a7621e2e39c25852",
        "type": "debug",
        "z": "df83788214c878df",
        "name": "debug_winter_night",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2490,
        "y": 360,
        "wires": []
    },
    {
        "id": "600a9b654b6fdd18",
        "type": "debug",
        "z": "df83788214c878df",
        "name": "debug_winter_day/evening",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2520,
        "y": 700,
        "wires": []
    },
    {
        "id": "55f7ea4a837a2031",
        "type": "comment",
        "z": "df83788214c878df",
        "name": "Winter",
        "info": "",
        "x": 1010,
        "y": 320,
        "wires": []
    },
    {
        "id": "eb54919221ee2a35",
        "type": "comment",
        "z": "df83788214c878df",
        "name": "Summer",
        "info": "",
        "x": 1000,
        "y": 200,
        "wires": []
    },
    {
        "id": "45b91fbec2b70c61",
        "type": "comment",
        "z": "df83788214c878df",
        "name": "01:00-06:00",
        "info": "",
        "x": 1210,
        "y": 120,
        "wires": []
    },
    {
        "id": "d433e7d66a7d2d8b",
        "type": "comment",
        "z": "df83788214c878df",
        "name": "06:00-01:00",
        "info": "",
        "x": 1210,
        "y": 40,
        "wires": []
    },
    {
        "id": "a8fa7b7c77534061",
        "type": "comment",
        "z": "df83788214c878df",
        "name": "<= 20%",
        "info": "",
        "x": 1490,
        "y": 100,
        "wires": []
    },
    {
        "id": "b713338af8ab657f",
        "type": "comment",
        "z": "df83788214c878df",
        "name": "> 20%",
        "info": "",
        "x": 1470,
        "y": 200,
        "wires": []
    },
    {
        "id": "0ee165faa52e4928",
        "type": "comment",
        "z": "df83788214c878df",
        "name": "Price > 0,70 ex VAT",
        "info": "",
        "x": 2190,
        "y": 160,
        "wires": []
    },
    {
        "id": "2f5d995d7377ca9c",
        "type": "comment",
        "z": "df83788214c878df",
        "name": "Price <= 0,70 ex VAT",
        "info": "",
        "x": 2200,
        "y": 80,
        "wires": []
    },
    {
        "id": "cd6138aeb0452921",
        "type": "comment",
        "z": "df83788214c878df",
        "name": "01:00-06:00",
        "info": "",
        "x": 1290,
        "y": 280,
        "wires": []
    },
    {
        "id": "f431f34d39398228",
        "type": "comment",
        "z": "df83788214c878df",
        "name": "06:00-17:00",
        "info": "",
        "x": 1290,
        "y": 360,
        "wires": []
    },
    {
        "id": "6fbeff22370caeb1",
        "type": "comment",
        "z": "df83788214c878df",
        "name": "21:00 - 01:00",
        "info": "",
        "x": 1290,
        "y": 400,
        "wires": []
    },
    {
        "id": "2164231c1b6495a5",
        "type": "comment",
        "z": "df83788214c878df",
        "name": "17:00-21:00",
        "info": "",
        "x": 1290,
        "y": 320,
        "wires": []
    },
    {
        "id": "b97a069f4a08fed0",
        "type": "comment",
        "z": "df83788214c878df",
        "name": "Price < 0,10 ex VAT",
        "info": "",
        "x": 1530,
        "y": 500,
        "wires": []
    },
    {
        "id": "3a201243cda1fd30",
        "type": "comment",
        "z": "df83788214c878df",
        "name": "> 75%",
        "info": "",
        "x": 1470,
        "y": 660,
        "wires": []
    },
    {
        "id": "e56f2bda14101e96",
        "type": "comment",
        "z": "df83788214c878df",
        "name": "30% - 75%",
        "info": "",
        "x": 1480,
        "y": 700,
        "wires": []
    },
    {
        "id": "c881cb62567caf60",
        "type": "comment",
        "z": "df83788214c878df",
        "name": "< 30%",
        "info": "",
        "x": 1470,
        "y": 740,
        "wires": []
    },
    {
        "id": "1a6eb5a470288d0a",
        "type": "comment",
        "z": "df83788214c878df",
        "name": "Total > Avg.Night x 1,7",
        "info": "",
        "x": 1680,
        "y": 700,
        "wires": []
    },
    {
        "id": "673436b6517ef8e1",
        "type": "comment",
        "z": "df83788214c878df",
        "name": "Total > Avg.Peak",
        "info": "",
        "x": 1680,
        "y": 780,
        "wires": []
    },
    {
        "id": "6506664eb8b4ac81",
        "type": "comment",
        "z": "df83788214c878df",
        "name": "True",
        "info": "",
        "x": 2010,
        "y": 620,
        "wires": []
    },
    {
        "id": "da0a88c18afe9b61",
        "type": "comment",
        "z": "df83788214c878df",
        "name": "False",
        "info": "",
        "x": 2030,
        "y": 840,
        "wires": []
    },
    {
        "id": "f03604c05eecb94b",
        "type": "comment",
        "z": "df83788214c878df",
        "name": "True",
        "info": "",
        "x": 1970,
        "y": 480,
        "wires": []
    },
    {
        "id": "55e39dafc8a2fab0",
        "type": "comment",
        "z": "df83788214c878df",
        "name": "False",
        "info": "",
        "x": 1970,
        "y": 560,
        "wires": []
    },
    {
        "id": "0d527827038d73ce",
        "type": "comment",
        "z": "df83788214c878df",
        "name": "Total > Avg.Night x 1,5",
        "info": "",
        "x": 1420,
        "y": 840,
        "wires": []
    },
    {
        "id": "ecc52c645132fd47",
        "type": "switch",
        "z": "0747f976fd85916a",
        "name": "Chck_OperatingMode",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 380,
        "y": 360,
        "wires": [
            [],
            [
                "876f32bbf14c9930"
            ]
        ]
    },
    {
        "id": "3fcde4584f249fd1",
        "type": "debug",
        "z": "0747f976fd85916a",
        "name": "http-response",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1140,
        "y": 360,
        "wires": []
    },
    {
        "id": "aef58521c847366e",
        "type": "inject",
        "z": "0747f976fd85916a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "10",
        "payloadType": "num",
        "x": 190,
        "y": 480,
        "wires": [
            [
                "ecc52c645132fd47"
            ]
        ]
    },
    {
        "id": "876f32bbf14c9930",
        "type": "function",
        "z": "0747f976fd85916a",
        "name": "Prepare_set_mode",
        "func": "var sonnen_ip = global.get(\"sonnen_api_ip\");\nvar sonnen_token = global.get(\"sonnen_api_token\");\n\nvar endpoint = \"/api/v2/configurations\"\n\nmsg.url = \"http://\" + sonnen_ip + endpoint;\nmsg.method = \"PUT\"\nmsg.headers = {};\nmsg.headers['Auth-Token'] = sonnen_token;\nmsg.payload = {\"EM_OperatingMode\":\"2\"}\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 360,
        "wires": [
            [
                "e3689fd0ce4326fe"
            ]
        ]
    },
    {
        "id": "e3689fd0ce4326fe",
        "type": "http request",
        "z": "0747f976fd85916a",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 890,
        "y": 360,
        "wires": [
            [
                "3fcde4584f249fd1"
            ]
        ]
    },
    {
        "id": "24063b19b4710c18",
        "type": "switch",
        "z": "0747f976fd85916a",
        "name": "Chck_OperatingMode",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 360,
        "y": 80,
        "wires": [
            [
                "e90f8f06048eb239"
            ],
            []
        ]
    },
    {
        "id": "1b4a40b564d8268e",
        "type": "debug",
        "z": "0747f976fd85916a",
        "name": "http-response",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1120,
        "y": 80,
        "wires": []
    },
    {
        "id": "6ababf4763fd97aa",
        "type": "inject",
        "z": "0747f976fd85916a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2",
        "payloadType": "num",
        "x": 170,
        "y": 200,
        "wires": [
            [
                "24063b19b4710c18"
            ]
        ]
    },
    {
        "id": "e90f8f06048eb239",
        "type": "function",
        "z": "0747f976fd85916a",
        "name": "Prepare_set_mode",
        "func": "var sonnen_ip = global.get(\"sonnen_api_ip\");\nvar sonnen_token = global.get(\"sonnen_api_token\");\n\nvar endpoint = \"/api/v2/configurations\"\n\nmsg.url = \"http://\" + sonnen_ip + endpoint;\nmsg.method = \"PUT\"\nmsg.headers = {};\nmsg.headers['Auth-Token'] = sonnen_token;\nmsg.payload = {\"EM_OperatingMode\":\"10\"}\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 80,
        "wires": [
            [
                "7453d743e2e7f261"
            ]
        ]
    },
    {
        "id": "7453d743e2e7f261",
        "type": "http request",
        "z": "0747f976fd85916a",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 870,
        "y": 80,
        "wires": [
            [
                "1b4a40b564d8268e"
            ]
        ]
    },
    {
        "id": "541b91fe90d7d34a",
        "type": "comment",
        "z": "0747f976fd85916a",
        "name": "Skift til TOU",
        "info": "",
        "x": 550,
        "y": 20,
        "wires": []
    },
    {
        "id": "811f8908bc60eea4",
        "type": "comment",
        "z": "0747f976fd85916a",
        "name": "Skift til SC",
        "info": "",
        "x": 540,
        "y": 260,
        "wires": []
    },
    {
        "id": "a50402e034f6a517",
        "type": "api-current-state",
        "z": "0747f976fd85916a",
        "name": "Sun_Forecast_Today",
        "server": "f3c6dfc0.bd122",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "sensor.solcast_pv_forecast_forecast_today",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 1740,
        "y": 120,
        "wires": [
            [
                "2a7f9032248209fb"
            ]
        ]
    },
    {
        "id": "382d5e1448243447",
        "type": "api-current-state",
        "z": "0747f976fd85916a",
        "name": "Sun_Forecast_Tomorrow",
        "server": "f3c6dfc0.bd122",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "sensor.solcast_pv_forecast_forecast_tomorrow",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 1750,
        "y": 180,
        "wires": [
            [
                "7328890acda2bc2e"
            ]
        ]
    },
    {
        "id": "2a7f9032248209fb",
        "type": "change",
        "z": "0747f976fd85916a",
        "name": "Saved_Sun_Today",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Sun_Today",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2010,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "7328890acda2bc2e",
        "type": "change",
        "z": "0747f976fd85916a",
        "name": "Saved_Sun_Tomorrow",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Sun_Tomorrow",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2020,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "d5a899052d42a155",
        "type": "api-current-state",
        "z": "0747f976fd85916a",
        "name": "SoC",
        "server": "f3c6dfc0.bd122",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "sensor.sonnenbatterie_225965_state_charge_user",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 1690,
        "y": 300,
        "wires": [
            [
                "57d683b36567bbfd"
            ]
        ]
    },
    {
        "id": "57d683b36567bbfd",
        "type": "change",
        "z": "0747f976fd85916a",
        "name": "Saved_SoC",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "SoC",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1990,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "dcc6e7113a0deec7",
        "type": "api-current-state",
        "z": "0747f976fd85916a",
        "name": "Weather",
        "server": "f3c6dfc0.bd122",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "weather.forecast_hjem",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 1700,
        "y": 240,
        "wires": [
            [
                "1a1f10b498576702"
            ]
        ]
    },
    {
        "id": "f2dac370e371c720",
        "type": "api-current-state",
        "z": "0747f976fd85916a",
        "name": "SB_Status",
        "server": "f3c6dfc0.bd122",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "sensor.sonnenbatterie_225965",
        "state_type": "str",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 1710,
        "y": 360,
        "wires": [
            [
                "b0e7386fe5764076"
            ]
        ]
    },
    {
        "id": "529a7bc0b19637ba",
        "type": "api-current-state",
        "z": "0747f976fd85916a",
        "name": "Grid_Consumption",
        "server": "f3c6dfc0.bd122",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "sensor.sonnenbatterie_225965_consumption_w",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 1730,
        "y": 420,
        "wires": [
            [
                "a8e726dfdfefcf0e"
            ]
        ]
    },
    {
        "id": "21bc075e1e2579e4",
        "type": "api-current-state",
        "z": "0747f976fd85916a",
        "name": "Production",
        "server": "f3c6dfc0.bd122",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "sensor.sonnenbatterie_225965_state_charge_user",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 1710,
        "y": 540,
        "wires": [
            [
                "4d115c745ce4685d"
            ]
        ]
    },
    {
        "id": "e4ae2873c594395c",
        "type": "api-current-state",
        "z": "0747f976fd85916a",
        "name": "kWh_Price_Raw",
        "server": "f3c6dfc0.bd122",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "sensor.nordpool_kwh_dk2_dkk_4_10_0",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 1720,
        "y": 600,
        "wires": [
            [
                "c3c0300f73aaa6a2"
            ]
        ]
    },
    {
        "id": "b5742bb5828c5d1d",
        "type": "api-current-state",
        "z": "0747f976fd85916a",
        "name": "kWh_Price_Total",
        "server": "f3c6dfc0.bd122",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "sensor.nordpool_kwh_dk2_dkk_4_07_025",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 1730,
        "y": 660,
        "wires": [
            [
                "6f42afc5c12ba187"
            ]
        ]
    },
    {
        "id": "1a1f10b498576702",
        "type": "change",
        "z": "0747f976fd85916a",
        "name": "Saved_Weather",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Weather",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2000,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "6f42afc5c12ba187",
        "type": "change",
        "z": "0747f976fd85916a",
        "name": "Saved_Price_Total",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "PriceTotal",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2010,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "c3c0300f73aaa6a2",
        "type": "change",
        "z": "0747f976fd85916a",
        "name": "Saved_Price_Raw",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "PriceRaw",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2010,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "b0e7386fe5764076",
        "type": "change",
        "z": "0747f976fd85916a",
        "name": "Saved_SB_Status",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "SB_Status",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2010,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "cccfacac6ad2efa2",
        "type": "api-current-state",
        "z": "0747f976fd85916a",
        "name": "Battery_in/out",
        "server": "f3c6dfc0.bd122",
        "version": 3,
        "outputs": 1,
        "halt_if": "",
        "halt_if_type": "str",
        "halt_if_compare": "is",
        "entity_id": "sensor.sonnenbatterie_225965_state_battery_inout",
        "state_type": "num",
        "blockInputOverrides": false,
        "outputProperties": [
            {
                "property": "payload",
                "propertyType": "msg",
                "value": "",
                "valueType": "entityState"
            },
            {
                "property": "data",
                "propertyType": "msg",
                "value": "",
                "valueType": "entity"
            }
        ],
        "for": "0",
        "forType": "num",
        "forUnits": "minutes",
        "override_topic": false,
        "state_location": "payload",
        "override_payload": "msg",
        "entity_location": "data",
        "override_data": "msg",
        "x": 1720,
        "y": 480,
        "wires": [
            [
                "00fdc7e32418bbde"
            ]
        ]
    },
    {
        "id": "a8e726dfdfefcf0e",
        "type": "change",
        "z": "0747f976fd85916a",
        "name": "Saved_Grid_Con",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "GridCon",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2010,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "00fdc7e32418bbde",
        "type": "change",
        "z": "0747f976fd85916a",
        "name": "Saved_Battery",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Battery",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2000,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "4d115c745ce4685d",
        "type": "change",
        "z": "0747f976fd85916a",
        "name": "Saved_Production",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Production",
                "tot": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2010,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "9f72b57ae87121e4",
        "type": "inject",
        "z": "0747f976fd85916a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1480,
        "y": 520,
        "wires": [
            [
                "b5742bb5828c5d1d",
                "a50402e034f6a517",
                "382d5e1448243447",
                "dcc6e7113a0deec7",
                "d5a899052d42a155",
                "f2dac370e371c720",
                "529a7bc0b19637ba",
                "cccfacac6ad2efa2",
                "21bc075e1e2579e4",
                "e4ae2873c594395c"
            ]
        ]
    },
    {
        "id": "dc012bb33e4f81f2",
        "type": "switch",
        "z": "0747f976fd85916a",
        "name": "Chck_OperatingMode",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "2",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "2",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 720,
        "y": 580,
        "wires": [
            [
                "75370cc21b5bd0b2"
            ],
            [
                "a42544570d49a81f"
            ]
        ]
    },
    {
        "id": "a42544570d49a81f",
        "type": "function",
        "z": "0747f976fd85916a",
        "name": "Prepare_set_mode",
        "func": "var sonnen_ip = global.get(\"sonnen_api_ip\");\nvar sonnen_token = global.get(\"sonnen_api_token\");\n\nvar endpoint = \"/api/v2/configurations\"\n\nmsg.url = \"http://\" + sonnen_ip + endpoint;\nmsg.method = \"PUT\"\nmsg.headers = {};\nmsg.headers['Auth-Token'] = sonnen_token;\nmsg.payload = {\"EM_OperatingMode\":\"2\"}\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 640,
        "wires": [
            [
                "caf66bf3b507c93a"
            ]
        ]
    },
    {
        "id": "caf66bf3b507c93a",
        "type": "http request",
        "z": "0747f976fd85916a",
        "name": "http_PUT_api",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1180,
        "y": 640,
        "wires": [
            [
                "9539c09c4e7f0c04"
            ]
        ]
    },
    {
        "id": "75370cc21b5bd0b2",
        "type": "change",
        "z": "0747f976fd85916a",
        "name": "Set_Message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Already_SC_no_change",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 580,
        "wires": [
            [
                "ca0d65d3150dddc9"
            ]
        ]
    },
    {
        "id": "740253d20833e1f9",
        "type": "function",
        "z": "0747f976fd85916a",
        "name": "get_operating_mode",
        "func": "try {\n    const startIndex = msg.payload.indexOf('\"OperatingMode\":\"');\n    if (startIndex !== -1) {\n        const valueStart = startIndex + '\"OperatingMode\":\"'.length;\n        const endIndex = msg.payload.indexOf('\"', valueStart);\n        if (endIndex !== -1) {\n            const operatingMode = msg.payload.substring(valueStart, endIndex);\n            msg.payload = operatingMode;\n        } else {\n            throw new Error(\"End of OperatingMode value not found\");\n        }\n    } else {\n        throw new Error(\"OperatingMode pattern not found\");\n    }\n} catch (error) {\n    console.error(\"Error extracting OperatingMode:\", error);\n    msg.payload = \"Error: Unable to extract OperatingMode\";\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 580,
        "wires": [
            [
                "dc012bb33e4f81f2"
            ]
        ]
    },
    {
        "id": "46618900479aef86",
        "type": "http request",
        "z": "0747f976fd85916a",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://192.168.31.171/api/v2/status",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 270,
        "y": 580,
        "wires": [
            [
                "740253d20833e1f9"
            ]
        ]
    },
    {
        "id": "fdc97cb86ec2142e",
        "type": "inject",
        "z": "0747f976fd85916a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "10",
        "payloadType": "num",
        "x": 90,
        "y": 580,
        "wires": [
            [
                "46618900479aef86"
            ]
        ]
    },
    {
        "id": "ca0d65d3150dddc9",
        "type": "debug",
        "z": "0747f976fd85916a",
        "name": "http-response",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1180,
        "y": 580,
        "wires": []
    },
    {
        "id": "9539c09c4e7f0c04",
        "type": "debug",
        "z": "0747f976fd85916a",
        "name": "http-response",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1380,
        "y": 640,
        "wires": []
    },
    {
        "id": "707981a809994885",
        "type": "function",
        "z": "0747f976fd85916a",
        "name": "get_operating_mode",
        "func": "try {\n    const startIndex = msg.payload.indexOf('\"OperatingMode\":\"');\n    if (startIndex !== -1) {\n        const valueStart = startIndex + '\"OperatingMode\":\"'.length;\n        const endIndex = msg.payload.indexOf('\"', valueStart);\n        if (endIndex !== -1) {\n            const operatingMode = msg.payload.substring(valueStart, endIndex);\n            msg.payload = operatingMode;\n        } else {\n            throw new Error(\"End of OperatingMode value not found\");\n        }\n    } else {\n        throw new Error(\"OperatingMode pattern not found\");\n    }\n} catch (error) {\n    console.error(\"Error extracting OperatingMode:\", error);\n    msg.payload = \"Error: Unable to extract OperatingMode\";\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 940,
        "wires": [
            [
                "eb757b51155ad6c6"
            ]
        ]
    },
    {
        "id": "659fa9bf06120858",
        "type": "http request",
        "z": "0747f976fd85916a",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://192.168.31.171/api/v2/status",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 170,
        "y": 940,
        "wires": [
            [
                "707981a809994885"
            ]
        ]
    },
    {
        "id": "eb757b51155ad6c6",
        "type": "switch",
        "z": "0747f976fd85916a",
        "name": "Chck_OperatingMode",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 620,
        "y": 940,
        "wires": [
            [
                "3f941a5f2eb7a809"
            ],
            [
                "a2730fc350637ccc"
            ]
        ]
    },
    {
        "id": "a2730fc350637ccc",
        "type": "function",
        "z": "0747f976fd85916a",
        "name": "Prepare_set_mode",
        "func": "var sonnen_ip = global.get(\"sonnen_api_ip\");\nvar sonnen_token = global.get(\"sonnen_api_token\");\n\nvar endpoint = \"/api/v2/configurations\"\n\nmsg.url = \"http://\" + sonnen_ip + endpoint;\nmsg.method = \"PUT\"\nmsg.headers = {};\nmsg.headers['Auth-Token'] = sonnen_token;\nmsg.payload = {\"EM_OperatingMode\":\"1\"}\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 1020,
        "wires": [
            [
                "acce5649c0f85118"
            ]
        ]
    },
    {
        "id": "acce5649c0f85118",
        "type": "http request",
        "z": "0747f976fd85916a",
        "name": "http_PUT_api",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1080,
        "y": 1020,
        "wires": [
            [
                "f67a0f3524d5f85d"
            ]
        ]
    },
    {
        "id": "8a19e7d42c2fa2b9",
        "type": "change",
        "z": "0747f976fd85916a",
        "name": "Set_Message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Already_Manual_no_change",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1300,
        "y": 860,
        "wires": [
            [
                "1276ae2ea9a9bc0f"
            ]
        ]
    },
    {
        "id": "b4d9b70f23deaea4",
        "type": "http request",
        "z": "0747f976fd85916a",
        "name": "Generic HTTP Request",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1730,
        "y": 1000,
        "wires": [
            [
                "e5bc8af52700d2e3"
            ]
        ]
    },
    {
        "id": "ac5f2b2f3b4070ce",
        "type": "function",
        "z": "0747f976fd85916a",
        "name": "Prepare charging=0 Watts",
        "func": "\nvar sonnen_ip = global.get(\"sonnen_api_ip\");\nvar sonnen_token = global.get(\"sonnen_api_token\");\n\nvar endpoint = \"/api/v2/setpoint/charge/0\";\n\nmsg.url = \"http://\" + sonnen_ip + endpoint;\nmsg.method = \"POST\"\nmsg.headers = {};\nmsg.headers['Auth-Token'] = sonnen_token;\nmsg.payload = {};\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1470,
        "y": 1000,
        "wires": [
            [
                "b4d9b70f23deaea4"
            ]
        ]
    },
    {
        "id": "f67a0f3524d5f85d",
        "type": "delay",
        "z": "0747f976fd85916a",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1260,
        "y": 1020,
        "wires": [
            [
                "ac5f2b2f3b4070ce"
            ]
        ]
    },
    {
        "id": "e2c49c0001c8a5a1",
        "type": "change",
        "z": "0747f976fd85916a",
        "name": "Set_Message_OK",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Charge_set_0_watts",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2210,
        "y": 960,
        "wires": [
            [
                "1276ae2ea9a9bc0f"
            ]
        ]
    },
    {
        "id": "e5bc8af52700d2e3",
        "type": "switch",
        "z": "0747f976fd85916a",
        "name": "Chck_Response",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1960,
        "y": 1000,
        "wires": [
            [
                "e2c49c0001c8a5a1"
            ],
            [
                "871fd75ddde7f453"
            ]
        ]
    },
    {
        "id": "871fd75ddde7f453",
        "type": "change",
        "z": "0747f976fd85916a",
        "name": "Set_Message_Error",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Error_Discharge_not_set",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2220,
        "y": 1020,
        "wires": [
            [
                "1276ae2ea9a9bc0f"
            ]
        ]
    },
    {
        "id": "398d81ccb71f2afc",
        "type": "inject",
        "z": "0747f976fd85916a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "10",
        "payloadType": "num",
        "x": 110,
        "y": 840,
        "wires": [
            [
                "659fa9bf06120858"
            ]
        ]
    },
    {
        "id": "1276ae2ea9a9bc0f",
        "type": "debug",
        "z": "0747f976fd85916a",
        "name": "http-response",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2440,
        "y": 860,
        "wires": []
    },
    {
        "id": "c9244bf60babb33f",
        "type": "inject",
        "z": "0747f976fd85916a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "10",
        "payloadType": "num",
        "x": 130,
        "y": 1240,
        "wires": [
            [
                "e702f12d391fc53c"
            ]
        ]
    },
    {
        "id": "a8de79dc7f884e2c",
        "type": "debug",
        "z": "0747f976fd85916a",
        "name": "http-response",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2580,
        "y": 1300,
        "wires": []
    },
    {
        "id": "eda581c29c98cbf6",
        "type": "inject",
        "z": "0747f976fd85916a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "10",
        "payloadType": "num",
        "x": 110,
        "y": 1560,
        "wires": [
            [
                "6eed99668f64bd09"
            ]
        ]
    },
    {
        "id": "66134ac26dd36b81",
        "type": "debug",
        "z": "0747f976fd85916a",
        "name": "http-response",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2440,
        "y": 1580,
        "wires": []
    },
    {
        "id": "a9de977b650d1b00",
        "type": "function",
        "z": "0747f976fd85916a",
        "name": "get_operating_mode",
        "func": "try {\n    const startIndex = msg.payload.indexOf('\"OperatingMode\":\"');\n    if (startIndex !== -1) {\n        const valueStart = startIndex + '\"OperatingMode\":\"'.length;\n        const endIndex = msg.payload.indexOf('\"', valueStart);\n        if (endIndex !== -1) {\n            const operatingMode = msg.payload.substring(valueStart, endIndex);\n            msg.payload = operatingMode;\n        } else {\n            throw new Error(\"End of OperatingMode value not found\");\n        }\n    } else {\n        throw new Error(\"OperatingMode pattern not found\");\n    }\n} catch (error) {\n    console.error(\"Error extracting OperatingMode:\", error);\n    msg.payload = \"Error: Unable to extract OperatingMode\";\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1340,
        "wires": [
            [
                "da03c743f84f240b"
            ]
        ]
    },
    {
        "id": "e702f12d391fc53c",
        "type": "http request",
        "z": "0747f976fd85916a",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://192.168.31.171/api/v2/status",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 190,
        "y": 1340,
        "wires": [
            [
                "a9de977b650d1b00"
            ]
        ]
    },
    {
        "id": "da03c743f84f240b",
        "type": "switch",
        "z": "0747f976fd85916a",
        "name": "Chck_OperatingMode",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 640,
        "y": 1340,
        "wires": [
            [
                "6de107a4e0ddd109"
            ],
            [
                "219ca23bb74863ba"
            ]
        ]
    },
    {
        "id": "219ca23bb74863ba",
        "type": "function",
        "z": "0747f976fd85916a",
        "name": "Prepare_set_mode",
        "func": "var sonnen_ip = global.get(\"sonnen_api_ip\");\nvar sonnen_token = global.get(\"sonnen_api_token\");\n\nvar endpoint = \"/api/v2/configurations\"\n\nmsg.url = \"http://\" + sonnen_ip + endpoint;\nmsg.method = \"PUT\"\nmsg.headers = {};\nmsg.headers['Auth-Token'] = sonnen_token;\nmsg.payload = {\"EM_OperatingMode\":\"1\"}\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1440,
        "wires": [
            [
                "d8e23808a4595630"
            ]
        ]
    },
    {
        "id": "d8e23808a4595630",
        "type": "http request",
        "z": "0747f976fd85916a",
        "name": "http_PUT_api",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1100,
        "y": 1440,
        "wires": [
            [
                "e00afc5ab11f9b53"
            ]
        ]
    },
    {
        "id": "099c3f4483ee3e28",
        "type": "change",
        "z": "0747f976fd85916a",
        "name": "Set_Message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Already_Manual_no_change",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1460,
        "y": 1280,
        "wires": [
            [
                "a8de79dc7f884e2c"
            ]
        ]
    },
    {
        "id": "6e71a2986230a6d9",
        "type": "http request",
        "z": "0747f976fd85916a",
        "name": "Generic HTTP Request",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1810,
        "y": 1400,
        "wires": [
            [
                "b87285869471feeb"
            ]
        ]
    },
    {
        "id": "94cb671ec8674d79",
        "type": "function",
        "z": "0747f976fd85916a",
        "name": "Prepare Charging=3500 Watts",
        "func": "\nvar sonnen_ip = global.get(\"sonnen_api_ip\");\nvar sonnen_token = global.get(\"sonnen_api_token\");\n\nvar endpoint = \"/api/v2/setpoint/charge/3500\";\n\nmsg.url = \"http://\" + sonnen_ip + endpoint;\nmsg.method = \"POST\"\nmsg.headers = {};\nmsg.headers['Auth-Token'] = sonnen_token;\nmsg.payload = {};\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 1400,
        "wires": [
            [
                "6e71a2986230a6d9"
            ]
        ]
    },
    {
        "id": "e00afc5ab11f9b53",
        "type": "delay",
        "z": "0747f976fd85916a",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1280,
        "y": 1440,
        "wires": [
            [
                "94cb671ec8674d79"
            ]
        ]
    },
    {
        "id": "fc3f85ed4daa5b50",
        "type": "change",
        "z": "0747f976fd85916a",
        "name": "Set_Message_OK",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Charge_set_3500",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2290,
        "y": 1360,
        "wires": [
            [
                "a8de79dc7f884e2c"
            ]
        ]
    },
    {
        "id": "b87285869471feeb",
        "type": "switch",
        "z": "0747f976fd85916a",
        "name": "Chck_Response",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2040,
        "y": 1400,
        "wires": [
            [
                "fc3f85ed4daa5b50"
            ],
            [
                "03dd0883b9d56b81"
            ]
        ]
    },
    {
        "id": "03dd0883b9d56b81",
        "type": "change",
        "z": "0747f976fd85916a",
        "name": "Set_Message_Error",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Error_Discharge_not_set",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2300,
        "y": 1420,
        "wires": [
            [
                "a8de79dc7f884e2c"
            ]
        ]
    },
    {
        "id": "6de107a4e0ddd109",
        "type": "switch",
        "z": "0747f976fd85916a",
        "name": "Chck_SetPoint",
        "property": "SetPoint",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "3500",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "3500",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1060,
        "y": 1320,
        "wires": [
            [
                "099c3f4483ee3e28"
            ],
            [
                "94cb671ec8674d79"
            ]
        ]
    },
    {
        "id": "84a1c3d733419069",
        "type": "function",
        "z": "0747f976fd85916a",
        "name": "get_operating_mode",
        "func": "try {\n    const startIndex = msg.payload.indexOf('\"OperatingMode\":\"');\n    if (startIndex !== -1) {\n        const valueStart = startIndex + '\"OperatingMode\":\"'.length;\n        const endIndex = msg.payload.indexOf('\"', valueStart);\n        if (endIndex !== -1) {\n            const operatingMode = msg.payload.substring(valueStart, endIndex);\n            msg.payload = operatingMode;\n        } else {\n            throw new Error(\"End of OperatingMode value not found\");\n        }\n    } else {\n        throw new Error(\"OperatingMode pattern not found\");\n    }\n} catch (error) {\n    console.error(\"Error extracting OperatingMode:\", error);\n    msg.payload = \"Error: Unable to extract OperatingMode\";\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1680,
        "wires": [
            [
                "7ed082e78a0b0402"
            ]
        ]
    },
    {
        "id": "6eed99668f64bd09",
        "type": "http request",
        "z": "0747f976fd85916a",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://192.168.31.171/api/v2/status",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "bearer",
        "senderr": false,
        "headers": [],
        "x": 170,
        "y": 1680,
        "wires": [
            [
                "84a1c3d733419069"
            ]
        ]
    },
    {
        "id": "7ed082e78a0b0402",
        "type": "switch",
        "z": "0747f976fd85916a",
        "name": "Chck_OperatingMode",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 620,
        "y": 1680,
        "wires": [
            [
                "9a5f12b32364cf6c"
            ],
            [
                "818174a6e7a18a7a"
            ]
        ]
    },
    {
        "id": "818174a6e7a18a7a",
        "type": "function",
        "z": "0747f976fd85916a",
        "name": "Prepare_set_mode",
        "func": "var sonnen_ip = global.get(\"sonnen_api_ip\");\nvar sonnen_token = global.get(\"sonnen_api_token\");\n\nvar endpoint = \"/api/v2/configurations\"\n\nmsg.url = \"http://\" + sonnen_ip + endpoint;\nmsg.method = \"PUT\"\nmsg.headers = {};\nmsg.headers['Auth-Token'] = sonnen_token;\nmsg.payload = {\"EM_OperatingMode\":\"1\"}\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 1780,
        "wires": [
            [
                "a95e7cdc8a726821"
            ]
        ]
    },
    {
        "id": "a95e7cdc8a726821",
        "type": "http request",
        "z": "0747f976fd85916a",
        "name": "http_PUT_api",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1080,
        "y": 1780,
        "wires": [
            [
                "9e7b2d7ac5034402"
            ]
        ]
    },
    {
        "id": "bef2296872d7190e",
        "type": "change",
        "z": "0747f976fd85916a",
        "name": "Set_Message",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Already_Manual_no_change",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1440,
        "y": 1660,
        "wires": [
            [
                "66134ac26dd36b81"
            ]
        ]
    },
    {
        "id": "ca6188b3e350c4fb",
        "type": "http request",
        "z": "0747f976fd85916a",
        "name": "Generic HTTP Request",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1790,
        "y": 1740,
        "wires": [
            [
                "7fb79c9ea45e32cb"
            ]
        ]
    },
    {
        "id": "bd7e5ef1697c6a9c",
        "type": "function",
        "z": "0747f976fd85916a",
        "name": "Prepare Discharging=3300 Watts",
        "func": "\nvar sonnen_ip = global.get(\"sonnen_api_ip\");\nvar sonnen_token = global.get(\"sonnen_api_token\");\n\nvar endpoint = \"/api/v2/setpoint/discharge/3300\";\n\nmsg.url = \"http://\" + sonnen_ip + endpoint;\nmsg.method = \"POST\"\nmsg.headers = {};\nmsg.headers['Auth-Token'] = sonnen_token;\nmsg.payload = {};\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 1740,
        "wires": [
            [
                "ca6188b3e350c4fb"
            ]
        ]
    },
    {
        "id": "9e7b2d7ac5034402",
        "type": "delay",
        "z": "0747f976fd85916a",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1260,
        "y": 1780,
        "wires": [
            [
                "bd7e5ef1697c6a9c"
            ]
        ]
    },
    {
        "id": "8f471cc6623d5982",
        "type": "change",
        "z": "0747f976fd85916a",
        "name": "Set_Message_OK",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Discharge_set_3300",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2270,
        "y": 1700,
        "wires": [
            [
                "66134ac26dd36b81"
            ]
        ]
    },
    {
        "id": "7fb79c9ea45e32cb",
        "type": "switch",
        "z": "0747f976fd85916a",
        "name": "Chck_Response",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2020,
        "y": 1740,
        "wires": [
            [
                "8f471cc6623d5982"
            ],
            [
                "f7870786649242c1"
            ]
        ]
    },
    {
        "id": "f7870786649242c1",
        "type": "change",
        "z": "0747f976fd85916a",
        "name": "Set_Message_Error",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Error_Discharge_not_set",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2280,
        "y": 1760,
        "wires": [
            [
                "66134ac26dd36b81"
            ]
        ]
    },
    {
        "id": "9a5f12b32364cf6c",
        "type": "switch",
        "z": "0747f976fd85916a",
        "name": "Chck_SetPoint",
        "property": "SetPoint",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "3300",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "3300",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1020,
        "y": 1660,
        "wires": [
            [
                "bef2296872d7190e"
            ],
            [
                "bd7e5ef1697c6a9c"
            ]
        ]
    },
    {
        "id": "3f941a5f2eb7a809",
        "type": "switch",
        "z": "0747f976fd85916a",
        "name": "Chck_SetPoint",
        "property": "SetPoint",
        "propertyType": "global",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 980,
        "y": 860,
        "wires": [
            [
                "8a19e7d42c2fa2b9"
            ],
            [
                "ac5f2b2f3b4070ce"
            ]
        ]
    }
]